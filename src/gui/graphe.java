/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import beans.Formation;
import beans.InscriptionFormation;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import services.FormationService;
import services.InscriptionFormationService;

/**
 *
 * @author GIGA STORE
 */
public class graphe extends javax.swing.JInternalFrame {
    private InscriptionFormationService ifs;
    private Formation f ;
    private FormationService fs;

    /**
     * Creates new form graphe
     */
    public graphe() {
        initComponents();
        this.setTitle("Graphe : Nombre de participants par formation");
       
        ifs = new InscriptionFormationService();
        
        displayChart();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChartPanel = new javax.swing.JPanel();

        javax.swing.GroupLayout ChartPanelLayout = new javax.swing.GroupLayout(ChartPanel);
        ChartPanel.setLayout(ChartPanelLayout);
        ChartPanelLayout.setHorizontalGroup(
            ChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 596, Short.MAX_VALUE)
        );
        ChartPanelLayout.setVerticalGroup(
            ChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 461, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ChartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ChartPanel;
    // End of variables declaration//GEN-END:variables

    private void displayChart() {
        
 
    DefaultCategoryDataset dataset = createDataset();
    JFreeChart barChart = ChartFactory.createBarChart(
            "Nombre de participants par formation",
            "Formation",
            "Nombre de participants",
            dataset,
            PlotOrientation.VERTICAL,
            true, true, false);

    // Obtenir le renderer du graphique
    org.jfree.chart.plot.CategoryPlot plot = barChart.getCategoryPlot();
    org.jfree.chart.renderer.category.BarRenderer renderer = (org.jfree.chart.renderer.category.BarRenderer) plot.getRenderer();

    // Définir la couleur des barres
    java.awt.Color customColor = new java.awt.Color(48, 48, 119);
    renderer.setSeriesPaint(0, customColor); // Appliquer la couleur à la série 0

    // Créer un ChartPanel avec le graphique
    ChartPanel chart = new ChartPanel(barChart);
    chart.setPreferredSize(new java.awt.Dimension(ChartPanel.getWidth(), ChartPanel.getHeight()));

    // Ajoute le ChartPanel au JPanel existant
    ChartPanel.removeAll(); // Supprime tout contenu précédent
    ChartPanel.add(chart, java.awt.BorderLayout.CENTER); // Ajoute le graphique au centre
    ChartPanel.revalidate(); // Rafraîchit le JPanel
    ChartPanel.repaint(); // Redessine le JPanel
        
    
    }

    private DefaultCategoryDataset createDataset() {
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    // Récupérer toutes les inscriptions
    List<InscriptionFormation> inscriptions = ifs.findAll();

    // Pour chaque inscription, on va compter le nombre de participants par formation
    for (InscriptionFormation inscription : inscriptions) {
        // Récupérer la formation liée à l'inscription
        Formation formation = inscription.getFormation();

        // Le nom de la formation
        String formationName = formation.getIntitule();

        // On compte le nombre d'inscriptions pour cette formation
        int count = getCountForFormation(inscriptions, formationName);

        // Ajouter ces données au dataset
        dataset.addValue(count, "Participants", formationName);
    }

    return dataset;
}

  private int getCountForFormation(List<InscriptionFormation> inscriptions, String formationName) {
    int count = 0;
    if (inscriptions != null) {  // Vérifiez si la liste n'est pas null
        for (InscriptionFormation inscription : inscriptions) {
            if (inscription.getFormation() != null && inscription.getFormation().getIntitule().equals(formationName)) {
                count++;
            }
        }
    }
    return count;
}
    
}
